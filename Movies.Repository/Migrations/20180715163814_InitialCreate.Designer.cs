// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Repository;

namespace Movies.Repository.Migrations
{
    [DbContext(typeof(MoviesContext))]
    [Migration("20180715163814_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("Movies.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Genre");

                    b.Property<int>("ReleaseYear");

                    b.Property<int>("RunningTime");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new { Id = 1, Genre = 27, ReleaseYear = 2003, RunningTime = 178, Title = "Dogville" },
                        new { Id = 2, Genre = 23, ReleaseYear = 2017, RunningTime = 100, Title = "A Dog's Purpose" },
                        new { Id = 3, Genre = 19, ReleaseYear = 2002, RunningTime = 109, Title = "The Emperor's Club" },
                        new { Id = 4, Genre = 19, ReleaseYear = 2016, RunningTime = 128, Title = "La La Land" },
                        new { Id = 5, Genre = 31, ReleaseYear = 2017, RunningTime = 123, Title = "The Shape of Water" },
                        new { Id = 6, Genre = 31, ReleaseYear = 2001, RunningTime = 104, Title = "The Others" },
                        new { Id = 7, Genre = 23, ReleaseYear = 2004, RunningTime = 101, Title = "The Machinist" },
                        new { Id = 8, Genre = 15, ReleaseYear = 2017, RunningTime = 141, Title = "Wonder Woman" },
                        new { Id = 9, Genre = 15, ReleaseYear = 2005, RunningTime = 157, Title = "Harry Potter and the Goblet of Fire" },
                        new { Id = 10, Genre = 19, ReleaseYear = 2001, RunningTime = 135, Title = "A Beautiful Mind" }
                    );
                });

            modelBuilder.Entity("Movies.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, UserName = "joe" },
                        new { Id = 2, UserName = "alex" },
                        new { Id = 3, UserName = "henry" }
                    );
                });

            modelBuilder.Entity("Movies.Domain.UserRating", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("MovieId");

                    b.Property<int>("Rating");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserRatings");

                    b.HasData(
                        new { UserId = 1, MovieId = 1, Rating = 5 },
                        new { UserId = 1, MovieId = 3, Rating = 3 },
                        new { UserId = 1, MovieId = 5, Rating = 1 },
                        new { UserId = 1, MovieId = 7, Rating = 5 },
                        new { UserId = 1, MovieId = 8, Rating = 3 },
                        new { UserId = 1, MovieId = 2, Rating = 2 },
                        new { UserId = 2, MovieId = 1, Rating = 2 },
                        new { UserId = 2, MovieId = 3, Rating = 3 },
                        new { UserId = 2, MovieId = 5, Rating = 1 },
                        new { UserId = 2, MovieId = 7, Rating = 2 },
                        new { UserId = 2, MovieId = 8, Rating = 3 },
                        new { UserId = 2, MovieId = 4, Rating = 4 },
                        new { UserId = 2, MovieId = 9, Rating = 1 },
                        new { UserId = 2, MovieId = 10, Rating = 2 },
                        new { UserId = 3, MovieId = 1, Rating = 4 },
                        new { UserId = 3, MovieId = 3, Rating = 5 },
                        new { UserId = 3, MovieId = 5, Rating = 3 },
                        new { UserId = 3, MovieId = 7, Rating = 2 }
                    );
                });

            modelBuilder.Entity("Movies.Domain.UserRating", b =>
                {
                    b.HasOne("Movies.Domain.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Domain.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
